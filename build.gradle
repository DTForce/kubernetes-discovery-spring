buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://repo.spring.io/libs-milestone'
        }
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.10.RELEASE'
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'signing'

group "com.dtforce"
def artifactIdentifier = "kubernetes-discovery-spring"

// Thanks https://stackoverflow.com/a/35041457
def getGitRef = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'name-rev', '--name-only', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitCommit = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def versionFromEnv = System.env["BUILD_VERSION"]
version = (versionFromEnv != null ? versionFromEnv : "${getGitRef}-${getGitCommit}-SNAPSHOT")

sourceCompatibility = 1.8

bootRepackage {
    enabled = false
}

dependencyManagement {
    dependencies {
        dependency 'org.springframework.boot:spring-boot-autoconfigure:2.0.0.RELEASE'
        dependency 'org.springframework:spring-context:5.0.3.RELEASE'
        dependency 'org.springframework.cloud:spring-cloud-commons:2.0.0.M6'
        dependency 'org.springframework.cloud:spring-cloud-netflix-core:2.0.0.M6'
        dependency 'com.netflix.ribbon:ribbon-loadbalancer:2.2.4'
        dependency 'io.fabric8:kubernetes-client:3.1.8'
        dependency 'io.fabric8:kubernetes-server-mock:3.1.8'
        dependency 'org.assertj:assertj-core:3.9.0'
        dependency 'com.google.guava:guava:25.1-jre'
    }
}

dependencies {
    // Spring + Spring Cloud
    compile('org.springframework.boot:spring-boot-autoconfigure')
    compile('org.springframework:spring-context')
    compile('org.springframework.cloud:spring-cloud-commons')
    compile('org.springframework.cloud:spring-cloud-netflix-core')
    compile('com.netflix.ribbon:ribbon-loadbalancer')
    compile('com.google.guava:guava')

    // Kubernetes Client
    compile('io.fabric8:kubernetes-client')

    // Annotation Processor
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

    // test dependencies
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.fabric8:kubernetes-server-mock')
    testCompile('org.assertj:assertj-core')
}

compileJava.dependsOn(processResources)

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier 'javadoc'
    from javadoc
}

artifacts {
    archives sourceJar, javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(url: System.env['MAVEN_REPO_URL']) {
                authentication(
                        userName: System.env['MAVEN_USER'],
                        password: System.env['MAVEN_PASSWORD']
                )
            }

            pom.artifactId = artifactIdentifier
            pom.project {
                name artifactIdentifier
                packaging 'jar'
                description 'Kubernetes Service Discovery for Spring Cloud and Ribbon'
                url 'https://github.com/DTForce/kubernetes-discovery-spring'

                scm {
                    url 'https://github.com/DTForce/kubernetes-discovery-spring'
                }

                licenses {
                    license {
                        name 'Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'stephane.lepin'
                        name 'St√©phane Lepin'
                        email 'stephane.lepin@dtforce.com'
                    }
                }
            }
        }
    }
}
